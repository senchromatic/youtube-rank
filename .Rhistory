tr(t()
)
help(t)
challenge.df = matrix(t(c(1,4,7,4)), nrow = 2)
fisher.test(challenge.df)
c(1,4,7,4)[0]
c(1,4,7,4)[1]
c(1,4,7,4)[2]
c(1,4,7,4)[3]
c(1,4,7,4)[4]
ttt <- matrix(c(1,4,7,4), nrow=2)
rrr <0 fisher.test(ttt)
rrr <- fisher.test(ttt)
rrr
name(rrr)
names(rrr)
rrr$p.value
rrr$conf.int
rrr$estimate
rrr$alternative
rrr$method
rrr$data.name
help(rrr)
help(fisher.test)
tttt <- matrix(c(100000,40,700000,400), nrow=2)
rrrr <- fisher.test(tttt)
rrrr
rrrr
tttt
1e5 / 7e5
fisher.test(matrix(c(100000,40,700000,400), nrow=2))
fisher.test(matrix(c(100000,40,700000,400), nrow=2), alternative="greater")
fisher.test(matrix(c(100000,40,7000000,400), nrow=2), alternative="greater")
fisher.test(matrix(c(100000,40,700,400), nrow=2), alternative="greater")
fisher.test(matrix(c(100000,40,7000,400), nrow=2), alternative="greater")
fisher.test(matrix(c(100000,40,70000,400), nrow=2), alternative="greater")
fisher.test(matrix(c(100000,40,70000000,400), nrow=2), alternative="greater")
fisher.test(matrix(c(100,100,10,10), nrow=2), alternative="greater")
fisher.test(matrix(c(1000,100,100,10), nrow=2), alternative="greater")
fisher.test(matrix(c(10000,100,1000,10), nrow=2), alternative="greater")
fisher.test(matrix(c(100,100,10,10), nrow=2), alternative="greater")
fisher.test(matrix(c(200,100,10,10), nrow=2), alternative="greater")
fisher.test(matrix(c(1000,100,10,10), nrow=2), alternative="greater")
fisher.test(matrix(c(1000,100,10,10), nrow=2))
fisher.test(matrix(c(10000,100,10,10), nrow=2))
fisher.test(matrix(c(10000,100,10,10), nrow=2), conf.level=95)
fisher.test(matrix(c(10000,100,10,10), nrow=2), conf.level=0.95)
fisher.test(matrix(c(10000,100,10,10), nrow=2), conf.level=0.97)
fisher.test(matrix(c(10000,100,10,10), nrow=2), conf.level=0.999)
fisher.test(matrix(c(10000,100,10,10), nrow=2), conf.level=0.95)
fisher.test(matrix(c(10000,100,200,10,10,20), nrow=3), conf.level=0.95)
fisher.test(matrix(c(10000,100,200,10,10,20), nrow=3), conf.level=0.95)
fisher.test(matrix(c(10000,100,10,10), nrow=3), conf.level=0.95)
fisher.test(matrix(c(10000,100,10,10)), conf.level=0.95)
fisher.test(matrix(c(10000,100,10,10), nrow=2), conf.level=0.95)
fisher.test(matrix(c(10000,100,10,10), ncol=2), conf.level=0.95)
fisher.test(matrix(c(10000,100,10,10), nrow=2), conf.level=0.95)
fisher.test(matrix(c(10000,100,10,10), nrow=2), conf.level=0.95)
fisher.test(matrix(c(10000,100,10,10), nrow=2), conf.level=0.95)$conf.int
getAttr(fisher.test(matrix(c(10000,100,10,10), nrow=2), conf.level=0.95)$conf.int, "conf.level")
getattr(fisher.test(matrix(c(10000,100,10,10), nrow=2), conf.level=0.95)$conf.int, "conf.level")
attr(fisher.test(matrix(c(10000,100,10,10), nrow=2), conf.level=0.95)$conf.int, "conf.level")
fisher.test(matrix(c(10000,100,10,10), nrow=2), conf.level=0.95)$conf.int
fisher.test(matrix(c(10000,100,10,10), nrow=2), conf.level=0.95)$conf.int$conf.level
fisher.test(matrix(c(10000,100,10,10), nrow=2), conf.level=0.95)$conf.int
fisher.test(matrix(c(10000,100,10,10), nrow=2), conf.level=0.95)$conf.int[2]
fisher.test(matrix(c(10000,100,10,10), nrow=2), conf.level=0.95)$conf.int[1]
fisher.test(matrix(c(10000,100,10,10), nrow=2), conf.level=0.95)$conf.int[1]
fisher.test(matrix(c(10000,100,10,10), nrow=2), conf.level=0.95)$conf.int[2]
Inf
Inf > 5
Inf < 5
Inf < -5
-Inf < -5
compare
rank
ranking
fisher.test(matrix(c(10000,100,10,10), ncol=2), conf.level=0.95)
fisher.test(matrix(c(10000,100,10,10), ncol=2, byrow=T), conf.level=0.95)
fisher.test(matrix(c(10000,100,10,10), ncol=2, byrow=F), conf.level=0.95)
matrix(c(10000,100,10,10), ncol=2, byrow=F)
matrix(c(10000,10,100,10), ncol=2, byrow=F)
compare.ratings <- function(v1, v2) {
contingency = matrix(c(v1$likes, v1$dislikes, v2$likes, v2$dislikes),
byrow=F, nrow = 2, conf.level=CONFIDENCE.LEVEL)
odds.ratio <- fisher.test(contingency, conf.level=CONFIDENCE.LEVEL)$conf.int
if (odds.ratio[1] > 1)
return(1)
if (odds.ratio[2] < 1)
return(-1)
return(0);
}
compare.ratings(c(likes=5, dislikes=1), c(likes=7000, dislikes=70))
CONFIDENCE.LEVEL = 0.95
compare.ratings(c(likes=5, dislikes=1), c(likes=7000, dislikes=70))
compare.ratings <- function(v1, v2) {
contingency = matrix(c(v1$likes, v1$dislikes,
v2$likes, v2$dislikes),
byrow=F, nrow = 2)
odds.ratio <- fisher.test(contingency,
conf.level=CONFIDENCE.LEVEL)$conf.int
if (odds.ratio[1] > 1)
return(1)
if (odds.ratio[2] < 1)
return(-1)
return(0);
}
compare.ratings(c(likes=5, dislikes=1), c(likes=7000, dislikes=70))
c(likes=5, dislikes=1)
c(likes=5, dislikes=1)$likes
c(likes=5, dislikes=1)["likes"]
c(likes=5, dislikes=1)[["likes"]]
ddd <- data.frame(likes=1:10, dislikes=rep(2, 10))
ddd
ddd$likes
ddd[1, ]
ddd[1, ]$likes
ddd[1, ]$dislikes
for (x in 1:5) x
for (x in 1:5) print(x)
rep(0, 10)
integer(10)
rownames
rate_videos <- function(ratings) {
nr <- nrow(ratings)
scores <- integer(nr)
names(scores) <- rownames(ratings)
for (r1 in 1:nr)
for (r2 in (r1+1):nr) {
s <- compare.ratings(ratings[r1,], ratings[r2,])
scores[r1] = scores[r1] + s
scores[r2] = scores[r2] - s
}
return(scores)
}
rate_videos(data.frame(likes=1:10, dislikes=rep(2, 10)))
data.frame(likes=1:10, dislikes=rep(2, 10))
rate_videos(data.frame(likes=1:10, dislikes=rep(2, 10)))
rate_videos(data.frame(likes=11:20, dislikes=rep(2, 10)))
rate_videos(data.frame(likes=11:20, dislikes=rep(5, 10)))
rate_videos(data.frame(likes=11:20, dislikes=rep(2, 10)))
contingency
rate_videos(data.frame(likes=11:20, dislikes=rep(2, 10)))
contingency
compare.ratings <- function(v1, v2) {
contingency = matrix(c(v1$likes, v1$dislikes,
v2$likes, v2$dislikes),
byrow=F, nrow=2)
print(contingency)
odds.ratio <- fisher.test(contingency,
conf.level=CONFIDENCE.LEVEL)$conf.int
if (odds.ratio[1] > 1)
return(1)
if (odds.ratio[2] < 1)
return(-1)
return(0);
}
rate_videos(data.frame(likes=11:20, dislikes=rep(2, 10)))
data.frame(likes=11:20, dislikes=rep(2, 10))
data.frame(likes=11:20, dislikes=rep(2, 10))[10,]
data.frame(likes=11:20, dislikes=rep(2, 10))[9,]
data.frame(likes=11:20, dislikes=rep(2, 10))[1,]
nrow(data.frame(likes=11:20, dislikes=rep(2, 10)))
data.frame(likes=11:20, dislikes=rep(2, 10))
round_robin <- function(ratings) {
nr <- nrow(ratings)
scores <- integer(nr)
names(scores) <- rownames(ratings)
for (r1 in 1:nr)
for (r2 in (r1+1):nr) {
s <- compare.ratings(ratings[r1,], ratings[r2,])
scores[r1] = scores[r1] + s
scores[r2] = scores[r2] - s
}
return(scores)
}
round.robin(data.frame(likes=11:20, dislikes=rep(2, 10)))
round.robin <- function(ratings) {
nr <- nrow(ratings)
scores <- integer(nr)
names(scores) <- rownames(ratings)
for (r1 in 1:nr)
for (r2 in (r1+1):nr) {
s <- compare.ratings(ratings[r1,], ratings[r2,])
scores[r1] = scores[r1] + s
scores[r2] = scores[r2] - s
}
return(scores)
}
round.robin(data.frame(likes=11:20, dislikes=rep(2, 10)))
round.robin(data.frame(likes=11:20, dislikes=rep(2, 10)))
data.frame(likes=11:20, dislikes=rep(2, 10))
round.robin <- function(ratings) {
nr <- nrow(ratings)
scores <- integer(nr)
names(scores) <- rownames(ratings)
for (r1 in 1:nr)
for (r2 in (r1+1):nr) {
print(ratings[r1,])
print(ratings[r2,])
s <- compare.ratings(ratings[r1,], ratings[r2,])
scores[r1] = scores[r1] + s
scores[r2] = scores[r2] - s
}
return(scores)
}
data.frame(likes=11:20, dislikes=rep(2, 10))
data.frame(likes=11:20, dislikes=rep(2, 10))
round.robin(data.frame(likes=11:20, dislikes=rep(2, 10)))
round.robin <- function(ratings) {
nr <- nrow(ratings)
scores <- integer(nr)
names(scores) <- rownames(ratings)
for (r1 in 1:nr)
for (r2 in (r1+1):nr) {
print(c(r1, r2))
print(ratings[r1,])
print(ratings[r2,])
s <- compare.ratings(ratings[r1,], ratings[r2,])
scores[r1] = scores[r1] + s
scores[r2] = scores[r2] - s
}
return(scores)
}
round.robin(data.frame(likes=11:20, dislikes=rep(2, 10)))
round.robin <- function(ratings) {
nr <- nrow(ratings)
scores <- integer(nr)
names(scores) <- rownames(ratings)
for (r1 in 1:(nr-1))
for (r2 in (r1+1):nr) {
print(c(r1, r2))
print(ratings[r1,])
print(ratings[r2,])
s <- compare.ratings(ratings[r1,], ratings[r2,])
scores[r1] = scores[r1] + s
scores[r2] = scores[r2] - s
}
return(scores)
}
round.robin(data.frame(likes=11:20, dislikes=rep(2, 10)))
CONFIDENCE.LEVEL = 0.95
#  1 => v1 > v2
# -1 => v1 < v2
#  0 => insignificant difference
compare.ratings <- function(v1, v2) {
contingency = matrix(c(v1$likes, v1$dislikes,
v2$likes, v2$dislikes),
byrow=F, nrow=2)
odds.ratio <- fisher.test(contingency,
conf.level=CONFIDENCE.LEVEL)$conf.int
if (odds.ratio[1] > 1)
return(1)
if (odds.ratio[2] < 1)
return(-1)
return(0);
}
round.robin <- function(ratings) {
nr <- nrow(ratings)
scores <- integer(nr)
names(scores) <- rownames(ratings)
for (r1 in 1:(nr-1))
for (r2 in (r1+1):nr) {
s <- compare.ratings(ratings[r1,], ratings[r2,])
scores[r1] = scores[r1] + s
scores[r2] = scores[r2] - s
}
return(scores)
}
round.robin(data.frame(likes=11:20, dislikes=rep(2, 10)))
round.robin(data.frame(likes=1:100, dislikes=rep(2, 100)))
round.robin <- function(ratings) {
nr <- nrow(ratings)
scores <- integer(nr)
names(scores) <- rownames(ratings)
for (r1 in 1:(nr-1))
for (r2 in (r1+1):nr) {
# s <- compare.ratings(ratings[r1,], ratings[r2,])
scores[r1] = scores[r1] + s
scores[r2] = scores[r2] - s
}
return(scores)
}
round.robin <- function(ratings) {
nr <- nrow(ratings)
scores <- integer(nr)
names(scores) <- rownames(ratings)
for (r1 in 1:(nr-1))
for (r2 in (r1+1):nr) {
# s <- compare.ratings(ratings[r1,], ratings[r2,])
scores[r1] = scores[r1] + s
scores[r2] = scores[r2] - s
}
return(scores)
}
round.robin <- function(ratings) {
nr <- nrow(ratings)
scores <- integer(nr)
names(scores) <- rownames(ratings)
for (r1 in 1:(nr-1))
for (r2 in (r1+1):nr) {
# s <- compare.ratings(ratings[r1,], ratings[r2,])
scores[r1] = scores[r1] + s
scores[r2] = scores[r2] - s
}
return(scores)
}
round.robin(data.frame(likes=1:100, dislikes=rep(2, 100)))
round.robin <- function(ratings) {
nr <- nrow(ratings)
scores <- integer(nr)
names(scores) <- rownames(ratings)
for (r1 in 1:(nr-1))
for (r2 in (r1+1):nr) {
s <- compare.ratings(ratings[r1,], ratings[r2,])
scores[r1] = scores[r1] + s
scores[r2] = scores[r2] - s
}
return(scores)
}
round.robin(data.frame(likes=1:100, dislikes=rep(2, 100)))
CONFIDENCE.LEVEL = 0.95
# -1 <= r1 < r2
#  0 <= insignificant difference
#  1 <= r1 > r2
compare.ratings <- function(r1, r2) {
contingency = matrix(c(r1$likes, r1$dislikes,
r2$likes, r2$dislikes),
byrow=F, nrow=2)
odds.ratio <- fisher.test(contingency,
conf.level=CONFIDENCE.LEVEL)$conf.int
if (odds.ratio[1] > 1)
return(1)
if (odds.ratio[2] < 1)
return(-1)
return(0);
}
# score = wins - losses
round.robin <- function(ratings) {
nr <- nrow(ratings)
scores <- integer(nr)
names(scores) <- rownames(ratings)
for (r1 in 1:(nr-1))
for (r2 in (r1+1):nr) {
s <- compare.ratings(ratings[r1,], ratings[r2,])
scores[r1] = scores[r1] + s
scores[r2] = scores[r2] - s
}
return(scores)
}
round.robin(data.frame(likes=1:100, dislikes=rep(2, 100)))
install.packages(rvest)
install.packages("rvest")
library(rvest)
install.packages("rvest")
install.packages("httr")
install.packages("openssl")
install.packages("openssl")
install.packages("httr")
install.packages("openssl")
install.packages("httr")
install.packages("rvest")
library(rvest)
youtube_video <- html("https://www.youtube.com/watch?v=RR7eUSFsn28")
vvv <- read_html("https://www.youtube.com/watch?v=RR7eUSFsn28")
vvv
vvv[2]
vvv
str(vvv)
vvv$doc
names(vvv)
vvv$doc
html_text(vvv)
html_nodes(vvv)
help(html_nodes)
html_structure(vvv)
html_nodes(vvv, "span")
html_nodes(vvv, "button")
vvv %>% html_nodes("button")
vvv %>% html_nodes("button") %>% html_attr("aria-label")
vvv %>% html_nodes("button") %>% html_attr("title")
vvv %>% html_nodes("button") %>% html_attr("title", "I like this")
vvv %>% html_nodes("button") %>% html_attr("title")
vvv %>% html_nodes("button") %>% html_attr("title", "I dislike this")
help(html_attr)
vvv %>% html_nodes("button") %>% html_attr("title")
vvv %>% html_nodes("#kbd-nav-807270")
vvv %>% html_node("#kbd-nav-807270")
vvv %>% html_nodes("#kbd-nav")
vvv %>% html_nodes("#kbd")
vvv %>% html_nodes("button") %>% html_attr("title")
vvv %>% html_nodes("button") %>% html_tag("title")
vvv %>% html_nodes("button") %>% html_attr("title")
vvv %>% html_nodes("button") %>% html_tag("title") == "I like this"
find(vvv %>% html_nodes("button") %>% html_tag("title"), "I like this")
vvv %>% html_nodes("button") %>% html_tag("title")
vvv %>% html_nodes("button") %>% html_attr("title")
vvv %>% html_nodes("button") %>% html_attrs("title")
vvv %>% html_nodes("button") %>% html_attr("title")
help("find")
vvv %>% html_nodes("button") %>% html_attr("title") == "I like this"
which(vvv %>% html_nodes("button") %>% html_attr("title") == "I like this")
which(vvv %>% html_nodes("button") %>% html_attr("title") == "I dislike this")
first(vvv %>% html_nodes("button") %>% html_attr("title") == "I dislike this")
head(which(vvv %>% html_nodes("button") %>% html_attr("title") == "I dislike this"), 1)
lll <- which(vvv %>% html_nodes("button") %>% html_attr("title") == "I like this")
bbb <- html_nodes(vvv, "button")
lll <- which(html_attr(bbb, "title") == "I like this")
bbb[lll]
html_text(bbb[lll])
gsub(",", "", html_text(bbb[lll]))
lll <- as.numeric(gsub(",", "", html_text(bbb[yyy])))
yyy <- which(html_attr(bbb, "title") == "I like this")
lll <- as.numeric(gsub(",", "", html_text(bbb[yyy])))
lll
nnn <- which(html_attr(bbb, "title") == "I dislike this")
uuu <- as.numeric(gsub(",", "", html_text(bbb[nnn])))
nnn
uuu
nnn <- head(which(html_attr(bbb, "title") == "I dislike this"), 1)
uuu <- as.numeric(gsub(",", "", html_text(bbb[nnn])))
uuu
data.frame(like=5, dislike=7)
paste0("dis", "like")
paste0("dis", "like", "yes")
html
aaa <- 7
bbb <- 12
data.frame(aaa, bbb)
data.frame(c(aaa, bbb))
data.frame(aaa, bbb)
rating <- function(video_id) {
url <- paste0("https://www.youtube.com/watch?v=", RR7eUSFsn28)
page <- read_html(url)
buttons <- html_nodes(page, "button")
upvote <- which(html_attr(buttons, "title") == "I like this")
likes <- as.numeric(gsub(",", "", html_text(buttons[upvote])))
downvote <- head(which(html_attr(buttons, "title") == "I dislike this"), 1)
dislikes <- as.numeric(gsub(",", "", html_text(bbb[nnn])))
return(data.frame(likes, dislikes))
}
rating("RR7eUSFsn28")
library(rvest)
DOMAIN <- "https://www.youtube.com/watch?v="
rating <- function(video_id) {
url <- paste0(DOMAIN, video_id)
page <- read_html(url)
buttons <- html_nodes(page, "button")
upvote <- which(html_attr(buttons, "title") == "I like this")
likes <- as.numeric(gsub(",", "", html_text(buttons[upvote])))
downvote <- head(which(html_attr(buttons, "title") == "I dislike this"), 1)
dislikes <- as.numeric(gsub(",", "", html_text(bbb[nnn])))
return(data.frame(likes, dislikes))
}
rating("RR7eUSFsn28")
library(rvest)
DOMAIN <- "https://www.youtube.com/watch?v="
rating <- function(video_id) {
url <- paste0(DOMAIN, video_id)
page <- read_html(url)
buttons <- html_nodes(page, "button")
upvote <- which(html_attr(buttons, "title") == "I like this")
likes <- as.numeric(gsub(",", "", html_text(buttons[upvote])))
downvote <- head(which(html_attr(buttons, "title") == "I dislike this"), 1)
dislikes <- as.numeric(gsub(",", "", html_text(buttons[downvote])))
return(data.frame(likes, dislikes))
}
rating("RR7eUSFsn28")
data.frame(aaa, bbb, rownames=c("x"))
data.frame(x=c(aaa, bbb), rownames=c("x"))
help(data.frame)
row.names(data())
row.names(data.frame(x=c(aaa, bbb)))
row.names(data.frame(aaa, bbb))
table
tab
row
row.names
rownames()
DOMAIN <- "https://www.youtube.com/watch?v="
rating <- function(video_id) {
url <- paste0(DOMAIN, video_id)
page <- read_html(url)
buttons <- html_nodes(page, "button")
upvote <- which(html_attr(buttons, "title") == "I like this")
likes <- as.numeric(gsub(",", "", html_text(buttons[upvote])))
downvote <- head(which(html_attr(buttons, "title") == "I dislike this"), 1)
dislikes <- as.numeric(gsub(",", "", html_text(buttons[downvote])))
temp <- data.frame(likes, dislikes)
row.names(temp) <- video_id
return(temp)
}
rating("RR7eUSFsn28")
install.packages("dplyr")
library(dplyr)
source('/mnt/6AEE0CFAEE0CBFF5/2017/projects/youtube-rank/scraper.R')
data.frame(aaa, bbb)
rbind(data.frame(aaa, bbb), data.frame(aaa, bbb))
source('/mnt/6AEE0CFAEE0CBFF5/2017/projects/youtube-rank/scraper.R')
source('/mnt/6AEE0CFAEE0CBFF5/2017/projects/youtube-rank/scraper.R')
source('/mnt/6AEE0CFAEE0CBFF5/2017/projects/youtube-rank/scraper.R')
source('/mnt/6AEE0CFAEE0CBFF5/2017/projects/youtube-rank/scraper.R')
source('/mnt/6AEE0CFAEE0CBFF5/2017/projects/youtube-rank/scraper.R')
source('/mnt/6AEE0CFAEE0CBFF5/2017/projects/youtube-rank/scraper.R')
source('/mnt/6AEE0CFAEE0CBFF5/2017/projects/youtube-rank/scraper.R')
source('/mnt/6AEE0CFAEE0CBFF5/2017/projects/youtube-rank/scraper.R')
source('/mnt/6AEE0CFAEE0CBFF5/2017/projects/youtube-rank/scraper.R')
source('/mnt/6AEE0CFAEE0CBFF5/2017/projects/youtube-rank/scraper.R')
source('/mnt/6AEE0CFAEE0CBFF5/2017/projects/youtube-rank/scraper.R')
source('/mnt/6AEE0CFAEE0CBFF5/2017/projects/youtube-rank/scraper.R')
source('/mnt/6AEE0CFAEE0CBFF5/2017/projects/youtube-rank/scraper.R')
source('/mnt/6AEE0CFAEE0CBFF5/2017/projects/youtube-rank/scraper.R')
